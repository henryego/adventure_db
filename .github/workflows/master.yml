name: Deploy to Azure SQL Database
on:
  push:
    branches:
       -  master
       -  prod
       -  preprod
  workflow_dispatch:
  # pull_request:
  #   branches: [ master ]      
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Build Database project
      run: |
        # cd AdventureWorks2012
        msbuild.exe AdventureWorks2012.sln /p:Configuration=Release
        
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v2
    #   with:
    #     dotnet-version: '8.0.x' # Specify the .NET version you need
      
    # - name: Setup .NET Core
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: '7.0'  # Specify the .NET Core version you need

    # - name: Build .NET Projects
    #   run: |
    #    cd AdventureWorks2012
    #    dotnet build AdventureWorks2012.sqlsln /p:Configuration=Release

  # build:
  #   runs-on: self-hosted
  #   steps:
  #   - uses: actions/checkout@v2

    - uses: actions/upload-artifact@v3.0.0
      with:
         name: SQLDB
         path: ${{ github.workspace }}/AdventureWorks2012/bin/Release/

  DeploySQLDBToDev:
    runs-on: self-hosted
    needs: build
    # if: success() && github.ref == 'refs/heads/preprod'
    # if: github.event.ref == 'refs/heads/test' && success()
    # if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'master'
    # if: github.event.ref == 'refs/heads/master' && success()
    # if: github.event.ref == 'refs/heads/devbranch' && success()
    # environment: ${{ github.ref == 'refs/heads/master' ? 'production' : 'staging' }}
    environment: DeploySQLDB

    steps:
       - name: download artifact contaning dacpac
         uses: actions/download-artifact@v3.0.0
         with:
            name: SQLDB

       # - uses: azure/login@v1
       #   with: 
       #     creds: ${{ secrets.AZURE_CREDENTIALS }}
           
       - uses: azure/login@v1
         with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

       - name: Azure SQl deploy 
         uses: Azure/sql-action@v1.3
         with:
           server-name: pocsqlserver00.database.windows.net
           connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING }}'
           dacpac-package: 'AdventureWorks2012.dacpac'

  # DeploySQLDBToPrd:
  #   runs-on: windows-latest
  #   needs: DeploySQLDBToDev
  #   if: success() && github.ref == 'refs/heads/prod'
  #   environment: DeploySQLDBProd
  #   steps:
  #      - name: download artifact contaning dacpac
  #        uses: actions/download-artifact@v3.0.0
  #        with:
  #           name: SQLDB

       # - uses: azure/login@v1
       #   with: 
       #     creds: ${{ secrets.AZURE_CREDENTIALS }}
           
       # - uses: azure/login@v1
       #   with:
       #    client-id: ${{ secrets.AZURE_CLIENT_ID }}
       #    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
       #    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

       # - name: Azure SQl deploy 
       #   uses: Azure/sql-action@v1.3
       #   with:
       #     server-name: advtestsqldb001.database.windows.net
       #     connection-string: '${{ secrets.AZURE_SQL_CONNECTION_STRING_PRD }}'
       #     dacpac-package: 'AdventureWorks2012.dacpac'


    # - name: Setup .NET Core
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: '6.0'  # Specify the .NET Core version you need

    # - name: Build Database project
    #   run: |
    #     dotnet build AdventureWorks2012/AdventureWorks2012.sqlproj /p:Configuration=Release        
    
    # - name: Build solution AdventureWorks2012/AdventureWorks2012.sqlproj
    #   run: msbuild AdventureWorks2012/AdventureWorks2012.sqlproj /p:OutDir=${{ github.workspace }}\BuildOutput
    #   shell: pwsh
      
    # - name: Copy Files to Artifact Staging Directory
    #   run: |
    #     $sourceFolder = "${{ github.workspace }}\BuildOutput"
    #     $targetFolder = "${{ github.workspace }}\artifactStagingDirectory"
    #     $buildConfiguration = "Release" # Change this to your build configuration if needed
    #     New-Item -ItemType Directory -Force -Path $targetFolder
    #     Copy-Item -Path "$sourceFolder\**\bin\$buildConfiguration\**" -Destination $targetFolder -Recurse -Force
    #   shell: pwsh
    #   if: always()
      
    # # - name: Build DACPAC from SQL project
    # #   run: |
    # #     msbuild.exe 'AdventureWorks2012/AdventureWorks2012.sqlproj' /p:OutputPath=./output
    # #     #msbuild.exe 'AdventureWorks2012/AdventureWorks2012.sln' /p:OutDir=${{ github.workspace }}
    # #   #dotnet build 'AdventureWorks2012/AdventureWorks2012.sln' /p:OutputPath=./output
    # # # dotnet build **/*.sqlproj /p:OutputPath=./output
    # # #   # This step assumes you're building a DACPAC from a SQL project.
    # # #   # If you already have a DACPAC, you can skip this step.
      
    # # - name: Publish
    # #   run: dotnet publish --output ${{ github.workspace }}\artifactStagingDirectory
    # # - uses: actions/upload-artifact@v2
    # #   with:
    # #     path: ${{ github.workspace }}
    
    # - name: Upload Artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: my-artifact  # Name of the artifact. Change this to something meaningful related to your project.
    #     path: ${{ github.workspace }}\artifactStagingDirectory  # Path to the directory containing the artifacts to upload.
    #   if: always()  # Ensures this step runs regardless of the success or failure of previous steps.
        
    # - name: Deploy DACPAC to Azure SQL Database
    #   uses: azure/sql-action@v1
    #   with:
    #     server-name: advtestsqldb001.database.windows.net  # Update this
    #     connection-string: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
    #     dacpac-package: './output/AdventureWorks2012.dacpac'
    #     # Update the path to your DACPAC
